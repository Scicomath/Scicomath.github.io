<center><h2>Large-Scale C++: 声明、定义与Linkage</h2></center>

<textarea class="markdown">
	## 介绍
	
	最近在读John Lakos的《Large-Scale C++: Process and Architecture》, 现在读到了1.3节：Declarations, Definitions, and Linkage，写一下本节读书笔记。

	我感觉Lakos的书挺难读的，除了C++本身比较难之外，他写书的语言也挺绕的，动不动就一个超长的长句，对于我这种英语水平一般的读者来说，理解起来挺困难的。不过我觉得再难也要坚持啃下去，因为我觉得这本书非常有价值。

	在一个程序的构建过程中最常见的事情就是将一个**被命名的实体**（named entities）与它的定义结合起来。这里的“被命名的实体“有点太过抽象了，简单的来说就是那些可以有名字的一些”东西“，比如变量，函数，类型还有模板，这些都属于被命名的实体。在代码中，我们会大量的用这些实体的名字来指代这些实体。对于编译器来说，名字本身，对编译器是没有任何意义的，它是指一个代号而已。当我们在程序里面使用一个名字的时候，我们其实指的是名字背后对应的那个实体（不管它是变量还是函数等等）。每个实体必须有一个唯一的**定义**（definition），而**声明**（declaration）就是联系名字和定义的”中间人“。为什么要有”声明“这个”中间人“呢？因为定义必须是唯一的，所以它只能出现在一个地方，而名字可能在很多地方、很多文件中被用到。而每一个cpp文件都是一个编译单元，即都是单独编译成对应的.o文件，在编译的时候编译器必须知道这个编译单元里面的名字是什么东西。注意，编译器不必知道一个编译单元里面所有的名字对应的实体的定义，但必须知道所有名字的”基本信息“，而声明就是用来提供这些基本信息的。

	上面说到，在一个编译单元里面，可能会有一些实体没有定义，只有声明。但是这个实体的定义必须在某一个编译单元中存在。在这些编译单元各自编译成.o的目标文件之后，通过链接程序来把这些声明的实体与其定义关联起来，最后生成一个完整的可执行程序。链接的规则就是由所谓的linkage决定的。

	## 1.3.1 声明与定义

	由于在C++中各个编译单元是单独编译的，而且由于构建工具的种种限制，所以很容易不小心会引入名字和定义不一致的问题。这些问题可能在编译或者甚至在链接的时候都无法被发现，最后导致难以debug的运行时崩溃。

	因此，这本书中提出的很多对**组件**(Component)的规范的目的就是为了避免这种不一致的问题。为了深入的理解这些设计规范，就需要对声明，定义和linkage还有构建工具如何与它们交互有更深入的理解。

	下面给出声明和定义的正式定义：
	- 声明(Declaration)：A **declaration** is a language construct that introduces a name into a scope.
	- 定义(Definition): A **definition** is a language construct that uniquely characterizes an entity within a program and, where applicable, reserves storage for it.
	
	一个声明在一个作用域中引入一个名字。这个名字将能在任何这个声明可见的地方用来表示对应的实体。书中举了几个声明的例子：
	- typedef int Int;  // "typedef"定义了“int”的一个别名
	- class Foo;        // 纯的类声明
	- enum E : int;     // "int"枚举声明
	- int f(int x);     // 函数声明

	一个定义描述了一个实体的特征，并在合适的时候预约存储空间：
	- int a ;           // 变量定义
	- class Foo { };    // 类定义
	- enum E { X };     // 同时定义E和x
	- int f(int x) { return x + 1; } // 同时定义f和x

	需要注意的是，许多定义本身也是作为自己的声明，上面的定义的例子都是这种情况。

	未完待续。。。

	
</textarea>